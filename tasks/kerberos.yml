---
  - name: Configure kerberos client settings
    become: True
    template:
      src: krb5.conf.j2
      dest: /etc/krb5.conf
      owner: root
      group: root
      mode: 0644
    notify: restart kdc

  - name: Store kerberos LDAP credentials
    become: True
    expect:
      command: "kdb5_ldap_util stashsrvpw -f /etc/krb5kdc/ldap.cred cn=krbbind,ou=TechnicalUsers,{{ auth_ldap_domain_ldap }}"
      creates: /etc/krb5kdc/ldap.cred
      responses:
        (cn\=krbbind): "{{ auth_kerberos_ldap_password }}"

  - name: Fix kerberos LDAP credentials permissions
    become: True
    file:
      path: /etc/krb5kdc/ldap.cred
      owner: root
      group: root
      mode: 0640

  - name: Configure KDC
    become: True
    template:
      src: kdc.conf.j2
      dest: /etc/krb5kdc/kdc.conf
      owner: root
      group: root
      mode: 0640
    notify: restart kdc

  - name: Figure out whether realm has been created yet
    expect:
      command: /bin/bash -c "ldapsearch -Z -x -W -D cn=Directory\ Manager -b {{ auth_ldap_domain_ldap }} cn=Kerberos | grep dn:"
      responses:
        (Enter LDAP Password): "{{ auth_ldap_admin_pwd }}"
    no_log: true
    register: krbrealmcheck
    failed_when: False
    changed_when: False

  - name: Create Kerberos realm
    run_once: true
    become: True
    when: krbrealmcheck.rc == 1
    expect:
      command: kdb5_ldap_util -D "cn=Directory Manager" create -subtrees "ou=Users,{{ auth_ldap_domain_ldap }}:ou=TechnicalUsers,{{ auth_ldap_domain_ldap }}" -r "{{ auth_ldap_domain|upper }}" -s
      responses:
        (cn\=Directory\ Manager): "{{ auth_ldap_admin_pwd }}"
        (database master key): "{{ auth_kerberos_database_master_key }}"

  - name: Configure LDAP ACLs (Kerberos)
    ldap_attr:
      dn: "{{ item.target }}"
      bind_dn: "cn=Directory Manager"
      bind_pw: '{{ auth_ldap_admin_pwd }}'
      server_uri: "{{ auth_ldap_ansible_url }}"
      values: "{{ item.acls }}"
      name: aci
      state: exact
    when: item.target == "cn=Kerberos,{{ auth_ldap_domain_ldap }}"
    with_items: "{{ auth_ldap_permissions }}"
    tags:
      - skip_ansible_lint

  - name: Fetch master database secret to control node
    when: krbrealmcheck.rc == 1
    become: True
    fetch:
      src: "/etc/krb5kdc/.k5.{{ auth_ldap_domain|upper }}"
      dest: "fetch/krb5secret"
      flat: yes
      validate_checksum: yes
      fail_on_missing: no
    failed_when: False

  - name: Upload master database secret to kerberos nodes
    when: krbrealmcheck.rc == 1
    become: True
    copy:
      src: "fetch/krb5secret"
      dest: "/etc/krb5kdc/.k5.{{ auth_ldap_domain|upper }}"
      owner: root
      group: root
      mode: 0600
    notify: restart kdc

  - meta: flush_handlers

  - name: Create default ticket policy
    when: krbrealmcheck.rc == 1
    run_once: True
    command: kadmin.local addpol -minlength 8 -minclasses 3 -maxfailure 3 -failurecountinterval "60 sec" -lockoutduration "600 sec" default

  - name: Create anonymous prinicpal for PKINIT/FAST
    when: krbrealmcheck.rc == 1
    run_once: True
    command: kadmin.local -q 'addprinc -randkey WELLKNOWN/ANONYMOUS'

  - name: Grant admin permissions to specific principals
    become: True
    when: auth_kerberos_admin_privs != []
    template:
      src: kadm5.acl.j2
      dest: /etc/krb5kdc/kadm5.acl
      owner: root
      group: root
      mode: 0644
    notify:
      - restart kdc
      - restart kadmind

  - include_tasks: serviceaccount.yml
    with_items: "{{ auth_ldap_service_accounts }}"

  - name: Reconfigure 389ds to support GSSAPI
    become: True
    template:
      src: dirsrv.j2
      dest: /etc/default/dirsrv
      owner: root
      group: root
      mode: 0644
    notify: restart dirsrv

  - name: Remove default SASL Kerberos mapping entries
    ldap_entry:
      dn: "cn={{ item }},cn=mapping,cn=sasl,cn=config"
      server_uri: "{{ auth_ldap_ansible_url }}"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ auth_ldap_admin_pwd }}"
      state: absent
    with_items:
      - Kerberos uid mapping

  # Quote: "There is no way to specify the order that mappings are processed.
  # However, there is a way to control how SASL mappings are processed: the
  # name. The Directory Server processes SASL mappings in reverse ASCII order."
  - name: Add normal people SASL UID mapping
    ldap_entry:
      dn: "cn=User Map,cn=mapping,cn=sasl,cn=config"
      server_uri: "{{ auth_ldap_ansible_url }}"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ auth_ldap_admin_pwd }}"
      state: present
      objectClass:
        - top
        - nsSaslMapping
      attributes:
        cn: User Map
        nsSaslMapRegexString: '([^/]*)@(.*)\.(.*)'
        nsSaslMapBaseDNTemplate: uid=\1,ou=Users,dc=\2,dc=\3
        nsSaslMapFilterTemplate: (objectclass=posixAccount)

  - name: Add service account SASL UID mapping
    ldap_entry:
      dn: "cn=z_Service Map,cn=mapping,cn=sasl,cn=config"
      server_uri: "{{ auth_ldap_ansible_url }}"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ auth_ldap_admin_pwd }}"
      state: present
      objectClass:
        - top
        - nsSaslMapping
      attributes: # Hint: For reasons unknown, 389ds drops the domain on these tickets...
        nsSaslMapRegexString: ([^/]+)/(.+)
        cn: z_Service Map
        nsSaslMapBaseDNTemplate: "uid=\\2,ou=\\1,ou=TechnicalUsers,{{ auth_ldap_domain_ldap }}"
        nsSaslMapFilterTemplate: (objectclass=*)

  - name: Add PAM passthrough auth for normal users
    ldap_attr:
      dn: "cn=PAM Pass Through Auth,cn=plugins,cn=config"
      server_uri: "{{ auth_ldap_ansible_url }}"
      bind_dn: "cn=Directory Manager"
      bind_pw: "{{ auth_ldap_admin_pwd }}"
      state: exact
      name: "{{ item.key }}"
      values: "{{ item.value }}"
    with_dict:
      nsslapd-pluginenabled: 'on'
      pamMissingSuffix: ERROR
      pamExcludeSuffix: cn=config
      pamIncludeSuffix: "ou=Users,{{ auth_ldap_domain_ldap }}"
      pamIDMapMethod: 'ENTRY'
      pamIDAttr: uid
      pamFallback: 'FALSE'
      pamSecure: 'TRUE'
      pamService: ldapkrb
    notify: restart dirsrv

  - name: Configure ldapkrb pam service
    become: True
    when: auth_ldap_store_pam | bool
    template:
      src: ldapkrb.j2
      dest: /etc/pam.d/ldapkrb
      owner: root
      group: root
      mode: 0644

  # If we changed the config, restart the server as we might need GSSAPI...
  - meta: flush_handlers
