---
- name: Create replication user
  community.general.ldap_entry:
    dn: "cn=replication manager,cn=config"
    server_uri: "{{ auth_ldap_ansible_url }}"
    objectClass:
      - top
      - person
      - inetorgperson
    bind_dn: "cn=Directory Manager"
    bind_pw: "{{ auth_ldap_admin_pwd }}"
    state: present
    attributes:
      cn: replication manager
      sn: RM
      userPassword: "{{ auth_ldap_sync_pwd }}"
      passwordExpirationTime: 20990119031407Z

- name: Create supplier replicas
  community.general.ldap_entry:
    dn: "cn=replica,cn=\"{{ auth_ldap_domain_ldap }}\",cn=mapping tree,cn=config"
    server_uri: "{{ auth_ldap_ansible_url }}"
    objectClass:
      - top
      - extensibleObject
      - nsds5replica
    bind_dn: "cn=Directory Manager"
    bind_pw: "{{ auth_ldap_admin_pwd }}"
    state: present
    attributes:
      cn: replica
      nsds5replicaroot: "{{ auth_ldap_domain_ldap }}"
      nsds5replicaid: "{{ auth_ldap_server_id }}"
      nsds5replicatype: 3
      nsds5flags: 1
      nsds5ReplicaPurgeDelay: 604800
      nsds5ReplicaBindDN: "cn=replication manager,cn=config"

- name: Create replication agreements
  community.general.ldap_entry:
    dn: "cn={{ item[0] }}-to-{{ item[1] }},cn=replica,cn=\"{{ auth_ldap_domain_ldap }}\",cn=mapping tree,cn=config"
    server_uri: "{{ auth_ldap_ansible_url }}"
    objectClass:
      - top
      - nsds5replicationagreement
    bind_dn: "cn=Directory Manager"
    bind_pw: "{{ auth_ldap_admin_pwd }}"
    state: present
    attributes:
      cn: "{{ item[0] }}-to-{{ item[1] }}"
      nsds5replicahost: "127.0.0.1"
      nsds5replicaport: "{{ 60389 + hostvars[item[0]]['auth_ldap_server_id'] }}"
      nsds5ReplicaBindDN: "cn=replication manager,cn=config"
      nsds5replicabindmethod: SIMPLE
      nsds5replicaroot: "{{ auth_ldap_domain_ldap }}"
      description: "agreement to replicate {{ item[1] }} to {{ item[0] }}"
      nsds5replicacredentials: "{{ auth_ldap_sync_pwd }}"
  when: (item[0] != item[1]) and (item[1] == ansible_fqdn)
  with_cartesian:
    - "{{ groups[auth_ldap_group] }}"
    - "{{ groups[auth_ldap_group] }}"
  register: repchanged
  no_log: true

- name: Create reinit script
  become: true
  ansible.builtin.template:
    src: 389-reinit.ldif.j2
    dest: /etc/ldap/ansible/reinit.ldif
    owner: root
    group: root
    mode: "0640"

- name: Reinit replication peers from master
  when: ansible_fqdn == auth_ldap_init_source and repchanged.changed
  become: true
  expect:
    command: /bin/bash -c "/usr/bin/ldapmodify -x -D cn=Directory\ Manager -W < /etc/ldap/ansible/reinit.ldif"
    responses:
      (Enter LDAP Password): "{{ auth_ldap_admin_pwd }}"
  no_log: true
  tags:
    - skip_ansible_lint

- name: Give replication some time
  when: repchanged.changed
  pause:
    seconds: 5
  tags:
    - skip_ansible_lint

- name: Enable Retro Changelog Plugin
  community.general.ldap_attrs:
    dn: "cn=Content Synchronization,cn=plugins,cn=config"
    server_uri: "{{ auth_ldap_ansible_url }}"
    bind_dn: "cn=Directory Manager"
    bind_pw: "{{ auth_ldap_admin_pwd }}"
    state: exact
    attributes:
      nsslapd-pluginEnabled: 'on'
  notify: Restart dirsrv

# Disable replication of the memberOf field in multi master setup
# this should be done according to the documentation [here](https://access.redhat.com/solutions/28282)
- name: Configure replication for memberOf plugin
  community.general.ldap_attrs:
    dn: "cn={{ item[0] }}-to-{{ item[1] }},cn=replica,cn={{ auth_ldap_domain_ldap | replace(\"=\", \"\\=\") | replace(\",\", \"\\,\") }},cn=mapping tree,cn=config"
    server_uri: "{{ auth_ldap_ansible_url }}"
    bind_dn: "cn=Directory Manager"
    bind_pw: "{{ auth_ldap_admin_pwd }}"
    state: exact
    attributes:
      nsds5replicatedattributelist: (objectclass=*) $ EXCLUDE memberof
  when: (item[0] != item[1]) and (item[1] == ansible_fqdn)
  with_cartesian:
    - "{{ groups[auth_ldap_group] }}"
    - "{{ groups[auth_ldap_group] }}"
  notify: Restart dirsrv
